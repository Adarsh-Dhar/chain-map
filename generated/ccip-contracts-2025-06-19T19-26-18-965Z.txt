<boltArtifact>
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Sender Contract (Source Chain)
import {IRouterClient} from "@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol";
import {Client} from "@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol";
import {IERC20} from "@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/token/ERC20/IERC20.sol";

contract Sender {
    IRouterClient public immutable router;
    IERC20 public immutable linkToken;

    constructor(address _router, address _linkToken) {
        router = IRouterClient(_router);
        linkToken = IERC20(_linkToken);
    }

    function sendCrossChainMessage(
        uint64 destinationChainSelector,
        address receiver
    ) external returns (bytes32 messageId) {
        // Create CCIP message
        Client.EVM2AnyMessage memory message = Client.EVM2AnyMessage({
            receiver: abi.encode(receiver),
            data: abi.encode("hello world"), // Fixed message content
            tokenAmounts: new Client.EVMTokenAmount[](0),
            extraArgs: "",
            feeToken: address(linkToken)
        });

        // Calculate fee
        uint256 fee = router.getFee(destinationChainSelector, message);

        // Approve and send
        linkToken.transferFrom(msg.sender, address(this), fee);
        linkToken.approve(address(router), fee);
        
        return router.ccipSend(destinationChainSelector, message);
    }
}

// Receiver Contract (Destination Chain)
import {IAny2EVMMessageReceiver} from "@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol";

contract Receiver is IAny2EVMMessageReceiver {
    event MessageReceived(bytes32 messageId, string message);
    string public lastMessage;

    function ccipReceive(
        Client.Any2EVMMessage calldata message
    ) external override {
        lastMessage = abi.decode(message.data, (string));
        emit MessageReceived(message.messageId, lastMessage);
    }
}

// Extra Contract 1 - Empty (Unknown Chain)
contract Unnamed {
    // No additional logic required
}

// Data Feed Interaction Example
import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";

contract DataFeedReader {
    AggregatorV3Interface internal audUsdFeed;

    constructor() {
        audUsdFeed = AggregatorV3Interface(0xB0C712f98daE15264c8E26132BCC91C40aD4d5F9);
    }

    function getAudUsdPrice() public view returns (int) {
        (, int answer,,,) = audUsdFeed.latestRoundData();
        return answer;
    }
}
</boltArtifact>